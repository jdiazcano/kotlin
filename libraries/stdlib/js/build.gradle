description = 'Kotlin Standard Library for JS'

apply plugin: 'kotlin2js'

ext.commonSrcDir = "${buildDir}/common-sources"
ext.commonTestSrcDir = "${buildDir}/common-test-sources"
ext.builtinsDir = "${rootDir}/../core/builtins"
ext.jsLibrariesDir = "${rootDir}/../js/js.libraries"
ext.jsSrcDir = "${jsLibrariesDir}/src"
ext.jsTestSrcDir = "${jsLibrariesDir}/test"
ext.jsSrcJsDir = "${jsSrcDir}/js"
ext.jsOutputFile = "${buildDir}/classes/kotlin.js"

sourceSets {
    builtinsFiles {
        kotlin {
            srcDir "${builtinsDir}/native/kotlin/"
            include "Comparable.kt"
        }
    }
    builtins {
        kotlin {
            source builtinsFiles.kotlin
            srcDir "${jsSrcDir}/builtins"
        }
    }


    mainNativeFiles {
        kotlin {
            srcDir "${builtinsDir}/native/kotlin"
            include "Iterator.kt"
            include "Collections.kt"
            include "CharSequence.kt"
            include "Annotation.kt"
        }
    }
    mainCoreFiles {
        kotlin {
            srcDir "${builtinsDir}/src/kotlin/"
            include "annotation/Annotations.kt"
            include "Function.kt"
            include "Iterators.kt"
            include "Range.kt"
            include "Progressions.kt"
            include "ProgressionIterators.kt"
            include "Ranges.kt"
            include "internal/InternalAnnotations.kt"
            include "internal/progressionUtil.kt"
            include "coroutines/**/*.kt"
            include "reflect/**/*.kt"
            include "Unit.kt"
        }
    }
    main {
        kotlin {
            source mainNativeFiles.kotlin
            source mainCoreFiles.kotlin
            srcDir jsSrcDir
            exclude "builtins"
            srcDir commonSrcDir
        }
    }

    test {
        kotlin {
            srcDir commonTestSrcDir
            srcDir jsTestSrcDir
        }
    }
}

dependencies {
    testCompile project(':kotlin-test:kotlin-test-js')
}

createPreprocessorTask(project, "Main", "${projectDir}/../src/kotlin", commonSrcDir)
createPreprocessorTask(project, "Test", "${projectDir}/../test", commonTestSrcDir)

kotlin.experimental.coroutines "enable"

tasks.withType(org.jetbrains.kotlin.gradle.tasks.Kotlin2JsCompile) {
    kotlinOptions {
        main = "noCall"
        moduleKind = "commonjs"
        freeCompilerArgs = [
                "-version",
                "-Xallow-kotlin-package",
        ]
    }
}

compileBuiltinsKotlin2Js {
    kotlinOptions {
        metaInfo = false
        outputFile = "${buildDir}/classes/builtins/kotlin.js"
    }
}

compileKotlin2Js {
    dependsOn preprocessSourcesMain
    kotlinOptions {
        outputFile = "${buildDir}/classes/main/kotlin.js"
    }
}

compileTestKotlin2Js {
    dependsOn preprocessSourcesTest
}

configurations {
    closureCompiler
}
dependencies {
    closureCompiler "com.google.javascript:closure-compiler:v20160315"
}

task compileJs {
    dependsOn compileBuiltinsKotlin2Js, compileKotlin2Js
    inputs.files(compileBuiltinsKotlin2Js.outputs.files)
    inputs.files(compileKotlin2Js.outputs.files)
    outputs.file(jsOutputFile)


    doLast {
        ant.taskdef(
                name: 'closureCompiler',
                classname: 'com.google.javascript.jscomp.ant.CompileTask',
                classpath: configurations.closureCompiler.asPath)

        ant.closureCompiler(
                compilationLevel: 'whitespace',
                prettyprint: 'true',
                languagein: 'ECMASCRIPT5_STRICT',
                warning: 'default',
                output: jsOutputFile,
                outputWrapperFile: "${jsSrcJsDir}/closure-wrapper.txt"
        ) {
            ant.path {
                fileset(dir: "${jsSrcJsDir}") {
                    include(name: '**/*.js')
                    exclude(name: 'externs.js')
                }
                fileset(dir: "${buildDir}/classes") {
                    include(name: 'builtins/kotlin.js')
                    include(name: 'main/kotlin.js')
                }
            }

            externs(dir: "${jsSrcJsDir}") {
                ant.file(name: 'externs.js')
            }
        }

        ant.replaceregexp(
                file: jsOutputFile,
                match: "module.exports,\\s*require\\([^)]+\\)",
                replace: "",
                byline: "true", encoding: "UTF-8")
        ant.replaceregexp(
                file: jsOutputFile,
                match: "function\\s*\\(_,\\s*Kotlin\\)",
                replace: "function()",
                byline: "true", encoding: "UTF-8")
        ant.replaceregexp(
                file: jsOutputFile,
                match: "return\\s+_;",
                replace: "",
                byline: "true", encoding: "UTF-8")
    }
}

classes.dependsOn compileJs


jar {
    enabled false
}

task mergedJar(type: Jar, dependsOn: classes) {
    classifier = null
    includeEmptyDirs false
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    from jsOutputFile
    from sourceSets.main.output
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    includeEmptyDirs false
    from (sourceSets.builtins.allSource) {
        into 'kotlin'
    }
    from (sourceSets.main.allSource) {
        into 'kotlin'
        exclude '**/*.java'
        exclude 'js/**'
    }
}


artifacts {
    add('default', mergedJar)
    archives mergedJar
    archives sourcesJar
    archives javadocJar
}